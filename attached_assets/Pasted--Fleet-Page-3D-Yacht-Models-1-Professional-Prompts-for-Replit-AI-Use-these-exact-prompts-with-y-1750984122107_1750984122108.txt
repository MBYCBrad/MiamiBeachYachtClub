üö¢ Fleet Page ‚Äî 3D Yacht Models
1. Professional Prompts for Replit AI
Use these exact prompts with your Replit AI agent to fetch or convert free GLTF/GLB yacht models and scaffold the React components.

Fetch & Host Models

‚ÄúFind free, royalty-free GLTF or GLB 3D models that most closely resemble the following yachts:

95ft Sunseeker (PURA VIDA)

74ft Azimut Flybridge (GRATITUDE)

70ft Sunseeker Sport Yacht (EL REY)

63ft Sea Ray 630 Sun Sport (WATERBABY)
Download them, optimize to under 5 MB per model, and upload to Replit‚Äôs static CDN or storage. Return me the public URLs.‚Äù

Component Boilerplate

‚ÄúGenerate a React component named <YachtModel> in TypeScript using @react-three/fiber and @react-three/drei that:

Loads a url prop GLTF model via <useGLTF>

Centers and scales it to fit in a 400px-tall canvas

Rotates slowly (0.01 rad/frame) on its Y-axis by default

Accepts a hovered prop to speed up rotation (0.05 rad/frame) when hovered
Export this component for reuse.‚Äù

Fleet Grid Layout

‚ÄúCreate a React component <Fleet3DGrid> that imports four <YachtModel> instances with the four model URLs.

Layout them in a responsive 2√ó2 grid

Below each canvas, render the yacht‚Äôs name and specs in a Tailwind-styled card

On hover of a card, pass hovered={true} to the corresponding <YachtModel> so it spins faster.‚Äù

2. Example GLTF URLs
(Replace these with the actual URLs your AI agent uploads.)

ts
Copy
Edit
// src/constants/yachtModels.ts
export const YACHT_MODELS = {
  puraVida: "https://cdn.replit.com/models/sunseeker95.glb",
  gratitude: "https://cdn.replit.com/models/azimut74.glb",
  elRey:      "https://cdn.replit.com/models/sunseeker70.glb",
  waterBaby:  "https://cdn.replit.com/models/searay63.glb",
};
export const YACHT_SPECS = {
  puraVida:  { name: "95ft Sunseeker ‚ÄòPura Vida‚Äô", length: "95‚Ä≤", cabins: 4, baths: 5 },
  gratitude: { name: "74ft Azimut Flybridge ‚ÄòGratitude‚Äô", length: "74‚Ä≤", cabins: 4, baths: 5 },
  elRey:     { name: "70ft Sunseeker Sport Yacht ‚ÄòEl Rey‚Äô", length: "70‚Ä≤", cabins: 4, baths: 4 },
  waterBaby: { name: "63ft Sea Ray 630 Sun Sport ‚ÄòWaterBaby‚Äô", length: "63‚Ä≤", cabins: 3, baths: 3.5 },
};
3. 3D Model Component
tsx
Copy
Edit
// src/components/fleet/YachtModel.tsx
import React, { useRef } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { useGLTF, OrbitControls } from "@react-three/drei";

type YachtModelProps = {
  url: string;
  hovered: boolean;
};

export function YachtModel({ url, hovered }: YachtModelProps) {
  const group = useRef<THREE.Group>(null!);
  const { scene } = useGLTF(url);

  // Scale & center
  scene.scale.set(0.8, 0.8, 0.8);
  scene.position.set(0, -0.5, 0);

  useFrame(() => {
    const speed = hovered ? 0.05 : 0.01;
    group.current.rotation.y += speed;
  });

  return <primitive ref={group} object={scene} />;
}
4. Fleet Grid Wrapper
tsx
Copy
Edit
// src/components/fleet/Fleet3DGrid.tsx
import React, { useState } from "react";
import { Canvas } from "@react-three/fiber";
import { OrbitControls, Html } from "@react-three/drei";
import { YachtModel } from "./YachtModel";
import { YACHT_MODELS, YACHT_SPECS } from "../../constants/yachtModels";

type Key = keyof typeof YACHT_MODELS;

export function Fleet3DGrid() {
  const [hoveredKey, setHoveredKey] = useState<Key | null>(null);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 p-8">
      {(Object.keys(YACHT_MODELS) as Key[]).map((key) => {
        const url = YACHT_MODELS[key];
        const specs = YACHT_SPECS[key];

        return (
          <div
            key={key}
            className="bg-gray-900 rounded-2xl overflow-hidden shadow-xl cursor-pointer"
            onMouseEnter={() => setHoveredKey(key)}
            onMouseLeave={() => setHoveredKey(null)}
          >
            <div className="w-full h-96">
              <Canvas camera={{ position: [0, 1, 3], fov: 50 }}>
                <ambientLight intensity={0.7} />
                <directionalLight position={[5, 5, 5]} intensity={1} />
                <YachtModel url={url} hovered={hoveredKey === key} />
                <OrbitControls enableZoom={false} enablePan={false} />
              </Canvas>
            </div>
            <div className="p-4 text-gray-200">
              <h3 className="text-xl font-semibold">{specs.name}</h3>
              <p className="mt-2 text-sm">
                Length: {specs.length} ‚Ä¢ Cabins: {specs.cabins} ‚Ä¢ Baths: {specs.baths}
              </p>
            </div>
          </div>
        );
      })}
    </div>
  );
}
5. Integration into Your Fleet Page
tsx
Copy
Edit
// src/pages/FleetPage.tsx
import React from "react";
import { Fleet3DGrid } from "../components/fleet/Fleet3DGrid";

export default function FleetPage() {
  return (
    <main className="bg-gray-950 min-h-screen text-white">
      <section className="py-20 text-center">
        <h1 className="text-4xl font-bold">Our Fleet</h1>
        <p className="mt-4 text-lg text-gray-400">
          Explore our exclusive collection of luxury yachts.
        </p>
      </section>
      <Fleet3DGrid />
      <section className="py-12 text-center">
        <a
          href="/apply"
          className="inline-block px-8 py-4 bg-gradient-to-r from-purple-600 to-blue-500 rounded-full text-lg font-semibold hover:from-purple-700 hover:to-blue-600 transition"
        >
          Apply to Become a Member
        </a>
      </section>
    </main>
  );
}
6. Tailwind & Package Setup
Install Dependencies

bash
Copy
Edit
npm install @react-three/fiber @react-three/drei three
Tailwind Config

js
Copy
Edit
// tailwind.config.js
module.exports = {
  darkMode: "class",
  theme: {
    extend: {
      colors: {
        gray: { 950: "#0A0A0A" },
        purple: { 600: "#7E22CE", 700: "#6B21A8" },
        blue:   { 500: "#3B82F6", 600: "#2563EB" },
      },
    },
  },
  plugins: [],
};
Ensure WebGL Canvas Sizing

css
Copy
Edit
/* globals.css */
canvas {
  display: block;
}
